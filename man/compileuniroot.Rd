\name{compile.uniroot}
\alias{compile.uniroot}
\alias{compile.optimize}
\alias{compile.optimise}
\alias{ccuniroot}
\alias{ccuniroot.all}
\alias{ccoptimise}
\alias{ccoptimize}

\title{Creates and solves compiled code problems to find a single root or to 
  optimize the function of one variable}
\description{
  \code{compile.uniroot} generates compiled code to find the root of one (nonlinear)
  function. It is to be used with function \code{ccuniroot}, which is a
  compiled code version of R-function \link{uniroot}, 
  or with function \code{ccuniroot.all}, a compiled code extension of \link{uniroot.all}
  from \code{rootSolve}.

  \code{compile.optimize} generates compiled code to optimize a (nonlinear) 
  function of one variable. It is to be used with function \code{ccoptimize},
  which is a compiled code extension of R-function \link{optimize}.
}
\usage{
 compile.uniroot (func, declaration = character(), includes = character(), 
   language = "F95", ...)

 compile.optimise (func, declaration = character(), includes = character(), 
   language = "F95", ...)

 compile.optimize (func, declaration = character(), includes = character(), 
   language = "F95", ...)

 ccuniroot(f, interval, ..., 
     lower = min(interval), upper = max(interval), 
     tol = .Machine$double.eps^0.25, maxiter = 1000, dllname = NULL,       
     rpar = NULL, ipar = NULL)

 ccuniroot.all(f, interval, 
     lower = min(interval), upper = max(interval), 
     tol = .Machine$double.eps^0.25, maxiter = 1000, n = 100, ...,         
     dllname = NULL, rpar = NULL, ipar = NULL)

 ccoptimise(f, interval, ..., 
     lower = min(interval), upper = max(interval), maximum = FALSE,
     tol = .Machine$double.eps^0.25, dllname = NULL,       
     rpar = NULL, ipar = NULL) 

 ccoptimize(f, interval, ..., 
     lower = min(interval), upper = max(interval), maximum = FALSE,
     tol = .Machine$double.eps^0.25, dllname = NULL,       
     rpar = NULL, ipar = NULL)
}
\arguments{
  \item{f }{The compiled subroutine that defines the function whose single
    root should be found or that should be optimized 
    and which is generated by \code{compile.uniroot} \code{compile.optimize},
    or a character string giving the name of a compiled subroutine in a 
    dynamically loaded shared library. 
  }  
  \item{func }{A character vector with F95, Fortran, or C code, without 
    declarations, that specifies the function whose root has to be found or 
    that has to be optimized. 

    The subroutine is defined as \code{func(x, f, rpar, ipar)},
     where \code{x} contains the variable for which the root is sought, 
     \code{rpar} and \code{ipar} are vectors of double and integer values, 
     as passed with the arguments of the same name. 
     The result, a scalar should be put in \code{f}  
  }
   \item{interval, lower, upper, tol, maxiter, maximum, n}{Arguments as defined for 
    \link{uniroot} or \link{optimize}.
   }  
   \item{rpar, ipar }{double and integer vector to be passed upon running the model.
   } 
  \item{dllname }{A string giving the name of the shared library (without extension) 
   that contains the compiled function definition refered to in \code{f}
  }
  \item{declaration }{Text that enters the declaration section in each function.
  }
  \item{includes }{Code that comes before the functions.
  }
  \item{language }{A character vector that specifies the source code; 
    one of c("F95", "Fortran", "C"); defaults to "F95".
  }
  \item{...}{optional arguments to the generic function (not used).
  }
}
\value{
  \code{compile.uniroot} returns an object of class \code{CFunc} as generated
  by \link{cfunction} from the package \code{inline}.

  The \code{parms} argument is not supported here.
}  

\details{

The compiled function that is generated by \code{compile.uniroot} and 
\code{compile.optimize} is defined as:

 \code{func(x, f, rpar, ipar) }

\code{ipar} and \code{rpar} are an integer vector, and double vector, that can be 
used to pass values at runtime.  

\code{x} is one value with the unknown, \code{f} is one value, the function whose root has to be found.

In case C is used all are pointers. 
}

\note{
As a basis for the function \code{ccuniroot} the uniroot version of R 2.12 was used (simpler).
}
\examples{
\dontrun{
## =========================================================================
## uniroot
## =========================================================================

system.time(for (i in 1:1000)
  uniroot(function(x) x*(x^2-1) + .5, lower = -2, upper = 2,
            tol = 1e-10))
            
f.95 <- " f = x*(x**2 - 1.d0) + 0.5d0"
cf <- compile.uniroot(f.95)
code(cf)

system.time(for (i in 1:1000)
  ccuniroot(cf, lower = -2, upper = 2, tol = 1e-10) 
)
# retrieve function value
ccfunc(cf, -1.191488)

## =========================================================================
## uniroot.all
## =========================================================================

fun <- function (x) cos(2*x)^3
fun.f95 <- "f = cos(2*x)**3"
ccfun <- compile.uniroot(fun.f95)

curve(fun(x), 0, 10,main = "uniroot.all")

All <- uniroot.all(fun, c(0, 10))
ccAll <- ccuniroot.all(ccfun, c(0, 10))

points(ccAll, y = rep(0, length(All)), pch = 16, cex = 2)

## =========================================================================
## optimize
## =========================================================================

f <- function (x, a) (x - a)^2
optimize(f, c(0, 1), tol = 0.0001, a = 1/3)

# parameter is passed via rpar here
f.f95 <- "f = (x - rpar(1))**2"
cf <- compile.optimize(f.f95)
ccoptimize(cf, c(0, 1), tol = 0.0001, rpar = c(1/3))


}
}
\author{
  Karline Soetaert <karline.soetaert@nioz.nl>
  
  Functions \code{ccuniroot} has copied significant parts of the R-function \link{uniroot} 
  (version R 2.12), and the C-code in file \code{zeroin.c} from base R (stats).
  
  Functions \code{ccoptimize} has copied significant parts of the R-function \link{optimize}, 
  and the C-code in file \code{optimize.c} from base R (stats).
}

\keyword{ utilities }