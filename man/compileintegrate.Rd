\name{compile.integrate}
\alias{compile.integrate}
\alias{ccintegrate}

\title{Compiled code function integration}
\description{
  \code{compile.integrate} generates compiled code 
  for integration of one-dimensional functions. It should be solved with \code{ccintegrate}.

  \code{ccointegrate} provides a compiled code 
  extension to R's function \link{integrate}.
 
}
\usage{
 compile.integrate (func, declaration = character(), 
   includes = character(), language = "F95", ...)

 ccintegrate(f, lower, upper, ..., subdivisions = 100L,
   rel.tol = .Machine$double.eps^.25, abs.tol = rel.tol, 
   stop.on.error = TRUE, keep.xy = FALSE, aux = NULL, 
   dllname = NULL, rpar = NULL, ipar = NULL)
}
\arguments{
  \item{f }{The compiled subroutine that defines the function that has to 
    be integrated and that is generated by \code{compile.integrate},
    or a character string giving the name of a compiled subroutine in a 
    dynamically loaded shared library. 
  }  
  \item{func }{A character vector with F95, Fortran, or C code, without 
    declarations, that specifies the function to integrate. 
 
    The subroutine will be defined as \code{func(n, x, f, rpar, ipar)},
     where \code{x} is the vector defining the independent variable,
     \code{n} is the number of x-values, \code{rpar} and 
     \code{ipar} are vectors of double and integer values, as passed with the 
     arguments of the same name to \code{ccintegrate}. 
     The result, a vector of length \code{n} should be put in \code{f}.
  }
  \item{dllname }{A string giving the name of the shared library (without extension) 
   that contains the compiled function or subroutine definition refered to in 
   \code{f}.
  }   
   \item{lower, upper, subdivisions, rel.tol, abs.tol, stop.on.error, keep.xy, aux }{
     Arguments as in the \link{integrate} function.
   }
   \item{rpar, ipar }{double and integer vector to be passed upon running the model.
   } 

  \item{declaration }{Text that eneters the declaration section in each function.
  }
  \item{includes }{Code that comes before the functions.
  }
  \item{language }{A character vector that specifies the source code; one of c("F95", "Fortran", "C") defaults to "F95".
  }
  \item{...}{optional arguments to the generic function (not used).
  }
}
\value{
  \code{compile.integrate} returns an object of class \code{CFunc}, 
  as returned by function \link{cfunction} from the package  \code{inline}. 
}  

\details{

The compiled function that is generated by \code{compile.integrate} is defined as:

 \code{func(n, x, f, rpar, ipar) }

In case Fortran or F95 is used, \code{n} is an integer value,

\code{ipar} and \code{rpar} are an integer vector, and double vector, that can be 
used to pass values at runtime.  

\code{x} and \code{f} are a double vector of length \code{n}.

In case C is used all are pointers. 

The user needs to specify \code{f}, based on \code{x}

}
\note{
 This has been added for completeness
}
\examples{
\dontrun{

## =======================================================================
## example from the integrate R help page
## note: the compiled code is actually slower than the R implementation
## =======================================================================
integrand <- function(x) {1/((x+1)*sqrt(x))}
integrate(integrand, lower = 0, upper = Inf)
integrate(integrand, lower = 0, upper = 10)

## ---------------------------------------------------------------------------
## The compiled versions
## ---------------------------------------------------------------------------

int.f95 <- "f = 1.d0 / ((x+1.d0)*sqrt(x))"
cint <- compile.integrate(func = int.f95)

int.C <- "for (int i = 0; i < *n; i++) f[i] = 1. / ((x[i]+1)*pow(x[i], 0.5));"
cint.C <- compile.integrate(func = int.C, language = "C")
ccintegrate(cint, lower = 0, upper = Inf)
ccintegrate(cint, lower = 0, upper = 10)

}
}
\author{
  Karline Soetaert <karline.soetaert@nioz.nl>

  Function \code{ccintegrate} has copied significant parts of the 
  R-function \link{integrate},
  and the C-code in file \code{integrate.c} from base R (stats).
}


\keyword{ utilities }
